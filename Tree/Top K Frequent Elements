Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].

Note: 
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
Subscribe to see which companies asked this question

Solution:

public class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num: nums) {
            map.put(num, map.containsKey(num)?map.get(num)+1:1);
        }
        //System.out.println(map);
        PriorityQueue<Map.Entry<Integer, Integer>> heap = 
        new PriorityQueue<>((o1, o2) -> o2.getValue()-o1.getValue());
        heap.addAll(map.entrySet());
        List<Integer> ret = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            ret.add(heap.poll().getKey());
        }
        return ret;
    }
}
