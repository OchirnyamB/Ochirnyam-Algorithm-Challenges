You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
       int c = 0;
       ListNode res = null, head = null;
       
       while(l1 != null || l2 != null || c != 0){
           int a1 = l1==null ?0 :l1.val;
           int a2 = l2==null ?0 :l2.val;
           int sum = a1+a2;
           int cur = (sum+c)%10;
           c = (sum+c)/10;
           if(res != null){
               res.next = new ListNode(cur);
               res = res.next;
           }else{
               res = new ListNode(cur);
               head = res;
           }
           if(l1 != null) l1 = l1.next;
           if(l2 != null) l2 = l2.next;
       }
       return head;
    }
}
