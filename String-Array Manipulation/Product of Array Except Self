Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Constraint: It's guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.

Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)

O(n)

class Solution {
    public int[] productExceptSelf(int[] nums) {
       int len = nums.length;
       int[] prod = new int[len];
       Arrays.fill(prod, 1);
        
       // Prefix product
       for(int i = 1; i < len; i++){
          prod[i] = prod[i-1]*nums[i-1];
       }
       
        // Suffix product
       int prod2 = nums[len-1];
       for(int i = len-2; i >= 0; i--){
           prod[i] *= prod2;
           prod2 *= nums[i];
       }
        
       return prod;
    }
}

O(n^2)
class Solution {
    public int[] productExceptSelf(int[] nums) {
       int len = nums.length;
       int[] prod = new int[len];
       Arrays.fill(prod, Integer.MAX_VALUE);
       for(int i = 0; i < len; i++){
           for(int j = 0; j < len; j++){
               if(j != i){
                   if(prod[j] == Integer.MAX_VALUE){
                       prod[j] = nums[i];
                   } else{
                       prod[j] *= nums[i];
                   }
               }
           }
       }
       return prod;
    }
}