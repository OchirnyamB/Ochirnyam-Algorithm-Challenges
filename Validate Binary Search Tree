Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void inOrder(TreeNode root, List<Integer> array){
        if(root == null) return;
        inOrder(root.left, array);
        array.add(root.val);
        inOrder(root.right, array);
    }
    public boolean isValidBST(TreeNode root) {
        List<Integer> array = new ArrayList<>();
        inOrder(root, array);
        
        for(int i = 1; i < array.size(); i++){
            if(array.get(i) <= array.get(i-1)) return false;
        }
        return true;
        
    }
}
